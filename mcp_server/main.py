# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T17:05:29+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from starlette.requests import Request

from models import ChapterNumber, ChapterSchema, Language, VerseNumber, VerseSchema

app = MCPProxy(
    title='Bhagavad Gita API',
    version='1.0',
)


@app.get(
    '/api/v1/chapters',
    description=""" Get a list of all the 18 Chapters of the Bhagavad Gita.<br/> """,
    tags=['bhagavad_gita_chapter_management'],
)
def get_api_v1_chapters(access_token: str, language: Optional[Language] = None):
    """
    Get all the 18 Chapters of the Bhagavad Gita.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/chapters/{chapter_number}',
    description=""" Get information about a specific chapter from the Bhagavad Gita.<br/> """,
    tags=['bhagavad_gita_chapter_management'],
)
def get_api_v1_chapters__chapter_number(
    access_token: str,
    chapter_number: ChapterNumber = 1,
    language: Optional[Language] = None,
):
    """
    Get a specific chapter from the Bhagavad Gita.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/chapters/{chapter_number}/verses',
    description=""" Get a list of all Verses from a particular Chapter.<br/> """,
    tags=['bhagavad_gita_chapter_management', 'bhagavad_gita_verse_management'],
)
def get_api_v1_chapters__chapter_number_verses(
    access_token: str,
    chapter_number: ChapterNumber = 1,
    language: Optional[Language] = None,
):
    """
    Get all the Verses from a Chapter.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/chapters/{chapter_number}/verses/{verse_number}',
    description=""" Get a specific verse from a specific chapter.<br/> """,
    tags=['bhagavad_gita_chapter_management', 'bhagavad_gita_verse_management'],
)
def get_api_v1_chapters__chapter_number_verses__verse_number(
    access_token: str,
    chapter_number: ChapterNumber = 1,
    verse_number: VerseNumber = 1,
    language: Optional[Language] = None,
):
    """
    Get a particular verse from a chapter.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/verses',
    description=""" Get a list of all Verses.<br/> """,
    tags=['bhagavad_gita_verse_management'],
)
def get_api_v1_verses(access_token: str, language: Optional[Language] = None):
    """
    Get all the Verses.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/auth/oauth/token', tags=['user_authentication_tokens'])
def post_auth_oauth_token(request: Request):
    """
    Send client credentials and get an access token.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
